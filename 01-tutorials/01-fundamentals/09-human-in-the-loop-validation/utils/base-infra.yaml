AWSTemplateFormatVersion: '2010-09-09'
Description: Manual approval for HR Agent Infrastructure.

Parameters:
  SolutionId:
    Type: String
    Default: pmma123
    AllowedPattern: '[a-z0-9-]*'

Resources:
#DynamoDB
  
  EmployeeStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['', [!Ref 'SolutionId', '_hr_agent_dynamo']]
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      AttributeDefinitions:
        - AttributeName: employee_id
          AttributeType: S
      KeySchema:
        - AttributeName: employee_id
          KeyType: HASH

#SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join ['', [!Ref 'SolutionId', '_hr_agent_sns']]       

#API Gateway
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Join ['', [!Ref 'SolutionId', '_hr_agent_api']]
      ProtocolType: HTTP
      Description: HR Agent API Gateway
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
        AllowMethods:
          - GET

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: $default
      AutoDeploy: true

  ApproveRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /approve
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ApproveApiIntegration

  RejectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /reject
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RejectApiIntegration

  ApproveApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ApproveLambdaFunction}'
      PayloadFormatVersion: '1.0'

  RejectApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${RejectLambdaFunction}'
      PayloadFormatVersion: '1.0'
 
#Lambda Functions    
  TriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['', [!Ref 'SolutionId', '-trigger-dynamo']]
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt TriggerLambdaRole.Arn
      Timeout: 90
      Environment:
        Variables:
          TOPIC_ARN: !Ref SNSTopic
          API_GW_URL: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
      Code:
        ZipFile: |
          import os
          import json
          import boto3

          sns_client = boto3.client('sns', region_name='us-east-1')
          api_gateway_base_url = os.environ.get('API_GW_URL')
          topic_arn = os.environ.get('TOPIC_ARN')

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))
              
              for record in event['Records']:
                  if record['eventName'] == 'MODIFY':
                      new_image = record['dynamodb']['NewImage']
                      employee_id = new_image['employee_id']['S']
                      approval_status = new_image.get('approval_status', {}).get('S', '')

                      # Only trigger if approval_status is explicitly 'required'
                      if approval_status.lower() == 'required':
                          # Generate approval and rejection URLs
                          approval_url = f"{api_gateway_base_url}/approve?employeeId={employee_id}"
                          rejection_url = f"{api_gateway_base_url}/reject?employeeId={employee_id}"

                          # Construct the email body
                          email_body = (
                              "Please review and approve/reject the employee onboarding status:\n\n"
                              f"Employee ID: {employee_id}\n\n"
                              f"✅ Approve: {approval_url}\n"
                              f"❌ Reject: {rejection_url}\n"
                          )

                          # Send the email notification using SNS
                          try:
                              response = sns_client.publish(
                                  TopicArn=topic_arn,
                                  Message=email_body,
                                  Subject='New Employee Onboarding Approval Request'
                              )
                              print("SNS message sent:", response)
                          except Exception as e:
                              print(f"Error sending SNS notification: {e}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('DynamoDB Stream event processed successfully')
              }


  TriggerLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt EmployeeStatusTable.StreamArn
      FunctionName: !GetAtt TriggerLambdaFunction.Arn
      StartingPosition: LATEST
      BatchSize: 1

  ApproveLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['', [!Ref 'SolutionId', '-approve-version']]
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt ActionLambdaRole.Arn
      Timeout: 90
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref EmployeeStatusTable
      Code:
        ZipFile: |
          import os
          import json
          import boto3

          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ.get('DYNAMO_TABLE'))

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))

              # Extract query parameters
              params = event.get('queryStringParameters') or {}
              employee_id = params.get('employeeId')

              # Validate input
              if not employee_id:
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Missing employeeId in query parameters.'})
                  }

              # Update approval_status to 'approved'
              try:
                  response = table.update_item(
                      Key={'employee_id': employee_id},
                      UpdateExpression='SET approval_status = :status',
                      ExpressionAttributeValues={':status': 'approved'},
                      ReturnValues='UPDATED_NEW'
                  )

                  return {
                      'statusCode': 200,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'employee_id': employee_id,
                          'approval_status': 'approved',
                          'message': 'Approval status updated successfully.'
                      })
                  }

              except Exception as e:
                  print(f"Error updating item: {e}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }



  RejectLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['', [!Ref 'SolutionId', '-reject-version']]
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt ActionLambdaRole.Arn
      Timeout: 90
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref EmployeeStatusTable
      Code:
        ZipFile: |
          import os
          import json
          import boto3

          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ.get('DYNAMO_TABLE'))

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))

              # Extract query parameters
              params = event.get('queryStringParameters') or {}
              employee_id = params.get('employeeId')

              # Validate input
              if not employee_id:
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': 'Missing employeeId in query parameters.'})
                  }

              # Update approval_status to 'rejected'
              try:
                  response = table.update_item(
                      Key={'employee_id': employee_id},
                      UpdateExpression='SET approval_status = :status',
                      ExpressionAttributeValues={':status': 'rejected'},
                      ReturnValues='UPDATED_NEW'
                  )

                  return {
                      'statusCode': 200,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'employee_id': employee_id,
                          'approval_status': 'rejected',
                          'message': 'Approval status updated to rejected.'
                      })
                  }

              except Exception as e:
                  print(f"Error updating item: {e}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

  
  ApproveLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApproveLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*/approve'      
  
  RejectLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RejectLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*/reject'      
          
  ActionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                   - 'dynamodb:UpdateItem'
                Resource:
                  - !GetAtt EmployeeStatusTable.Arn

  TriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                Resource:
                  - !GetAtt EmployeeStatusTable.StreamArn
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref SNSTopic
Outputs:
  SNSTopicArn:
    Description: The ARN of the SNS Topic
    Value: !Ref SNSTopic
    

  DynamoDBTableName:
    Description: The name of the DynamoDB table
    Value: !Ref EmployeeStatusTable
    